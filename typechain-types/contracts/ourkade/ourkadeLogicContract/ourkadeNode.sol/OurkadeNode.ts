/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type NodeInfoStruct = {
  PlayerProfileId: PromiseOrValue<string>;
  NodeId: PromiseOrValue<BigNumberish>;
  LoyaltyLocked: PromiseOrValue<BigNumberish>[];
  Status: PromiseOrValue<BigNumberish>;
};

export type NodeInfoStructOutput = [string, BigNumber, BigNumber[], number] & {
  PlayerProfileId: string;
  NodeId: BigNumber;
  LoyaltyLocked: BigNumber[];
  Status: number;
};

export interface OurkadeNodeInterface extends utils.Interface {
  functions: {
    "GetNodeIdAtIndex(uint256)": FunctionFragment;
    "GetNodeInfo(address,uint96)": FunctionFragment;
    "GetNodeInfoCount()": FunctionFragment;
    "GetNodeQueueIds(uint256)": FunctionFragment;
    "NodeQueueGetEntries(uint256,uint256,uint256)": FunctionFragment;
    "NodeQueueGetLength()": FunctionFragment;
    "NodeQueueTierGet(uint256)": FunctionFragment;
    "checkNodeInfo(address,uint96)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GetNodeIdAtIndex"
      | "GetNodeInfo"
      | "GetNodeInfoCount"
      | "GetNodeQueueIds"
      | "NodeQueueGetEntries"
      | "NodeQueueGetLength"
      | "NodeQueueTierGet"
      | "checkNodeInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GetNodeIdAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetNodeInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetNodeInfoCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetNodeQueueIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "NodeQueueGetEntries",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "NodeQueueGetLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NodeQueueTierGet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkNodeInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "GetNodeIdAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetNodeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetNodeInfoCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetNodeQueueIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NodeQueueGetEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NodeQueueGetLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NodeQueueTierGet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNodeInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OurkadeNode extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OurkadeNodeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GetNodeIdAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { key: string }>;

    GetNodeInfo(
      key: PromiseOrValue<string>,
      nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[NodeInfoStructOutput]>;

    GetNodeInfoCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    GetNodeQueueIds(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    NodeQueueGetEntries(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      initialRemainingTurns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeQueueGetLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    NodeQueueTierGet(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    checkNodeInfo(
      key: PromiseOrValue<string>,
      nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  GetNodeIdAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  GetNodeInfo(
    key: PromiseOrValue<string>,
    nodeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<NodeInfoStructOutput>;

  GetNodeInfoCount(overrides?: CallOverrides): Promise<BigNumber>;

  GetNodeQueueIds(
    _count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  NodeQueueGetEntries(
    start: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    initialRemainingTurns: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeQueueGetLength(overrides?: CallOverrides): Promise<BigNumber>;

  NodeQueueTierGet(
    _tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  checkNodeInfo(
    key: PromiseOrValue<string>,
    nodeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    GetNodeIdAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    GetNodeInfo(
      key: PromiseOrValue<string>,
      nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<NodeInfoStructOutput>;

    GetNodeInfoCount(overrides?: CallOverrides): Promise<BigNumber>;

    GetNodeQueueIds(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    NodeQueueGetEntries(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      initialRemainingTurns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber, BigNumber]>;

    NodeQueueGetLength(overrides?: CallOverrides): Promise<BigNumber>;

    NodeQueueTierGet(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    checkNodeInfo(
      key: PromiseOrValue<string>,
      nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    GetNodeIdAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetNodeInfo(
      key: PromiseOrValue<string>,
      nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetNodeInfoCount(overrides?: CallOverrides): Promise<BigNumber>;

    GetNodeQueueIds(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NodeQueueGetEntries(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      initialRemainingTurns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeQueueGetLength(overrides?: CallOverrides): Promise<BigNumber>;

    NodeQueueTierGet(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkNodeInfo(
      key: PromiseOrValue<string>,
      nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GetNodeIdAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetNodeInfo(
      key: PromiseOrValue<string>,
      nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetNodeInfoCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GetNodeQueueIds(
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NodeQueueGetEntries(
      start: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      initialRemainingTurns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeQueueGetLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NodeQueueTierGet(
      _tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkNodeInfo(
      key: PromiseOrValue<string>,
      nodeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
