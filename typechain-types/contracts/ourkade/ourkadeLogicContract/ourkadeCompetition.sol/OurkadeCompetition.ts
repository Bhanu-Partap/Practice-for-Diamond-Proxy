/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type MatchStruct = {
  DataPin: PromiseOrValue<BytesLike>;
  Round: PromiseOrValue<BigNumberish>;
  Player: PromiseOrValue<string>;
  Score: PromiseOrValue<BigNumberish>;
  Status: PromiseOrValue<BigNumberish>;
  StartTime: PromiseOrValue<BigNumberish>;
  EndTime: PromiseOrValue<BigNumberish>;
};

export type MatchStructOutput = [
  string,
  number,
  string,
  BigNumber,
  number,
  BigNumber,
  BigNumber
] & {
  DataPin: string;
  Round: number;
  Player: string;
  Score: BigNumber;
  Status: number;
  StartTime: BigNumber;
  EndTime: BigNumber;
};

export type CompetitionStruct = {
  CompetitionId: PromiseOrValue<BytesLike>;
  GameDefinition: PromiseOrValue<BytesLike>;
  EligibleByTicket: PromiseOrValue<boolean>;
  EligibleLoyalty: PromiseOrValue<BigNumberish>;
  EligibleReputation: PromiseOrValue<BigNumberish>;
  EligibleRankMinimum: PromiseOrValue<BigNumberish>;
  EligibleRankMaximum: PromiseOrValue<BigNumberish>;
  EligibleEloMinimum: PromiseOrValue<BigNumberish>;
  EligibleEloMaximum: PromiseOrValue<BigNumberish>;
  CurrencyType: PromiseOrValue<BigNumberish>;
  PrizeType: PromiseOrValue<BigNumberish>;
  PrizePool: PromiseOrValue<BigNumberish>;
  NodeReward: PromiseOrValue<BigNumberish>;
  EntryFee: PromiseOrValue<BigNumberish>;
  MinimumPlayers: PromiseOrValue<BigNumberish>;
  MaximumPlayers: PromiseOrValue<BigNumberish>;
  Players: PromiseOrValue<string>[];
  Matches: MatchStruct[];
  MatchScoreData: PromiseOrValue<BigNumberish>[];
  EndTime: PromiseOrValue<BigNumberish>;
  MatchesPerRound: PromiseOrValue<BigNumberish>;
  MatchDuration: PromiseOrValue<BigNumberish>;
  HasDisputes: PromiseOrValue<boolean>;
  DataPin: PromiseOrValue<BytesLike>;
  Judges: PromiseOrValue<BytesLike>[];
  Status: PromiseOrValue<BigNumberish>;
};

export type CompetitionStructOutput = [
  string,
  string,
  boolean,
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string[],
  MatchStructOutput[],
  BigNumber[],
  BigNumber,
  number,
  BigNumber,
  boolean,
  string,
  string[],
  number
] & {
  CompetitionId: string;
  GameDefinition: string;
  EligibleByTicket: boolean;
  EligibleLoyalty: BigNumber;
  EligibleReputation: number;
  EligibleRankMinimum: number;
  EligibleRankMaximum: number;
  EligibleEloMinimum: number;
  EligibleEloMaximum: number;
  CurrencyType: number;
  PrizeType: number;
  PrizePool: BigNumber;
  NodeReward: BigNumber;
  EntryFee: BigNumber;
  MinimumPlayers: BigNumber;
  MaximumPlayers: BigNumber;
  Players: string[];
  Matches: MatchStructOutput[];
  MatchScoreData: BigNumber[];
  EndTime: BigNumber;
  MatchesPerRound: number;
  MatchDuration: BigNumber;
  HasDisputes: boolean;
  DataPin: string;
  Judges: string[];
  Status: number;
};

export interface OurkadeCompetitionInterface extends utils.Interface {
  functions: {
    "CancelCompetition(bytes32)": FunctionFragment;
    "CreateCompetition(bytes)": FunctionFragment;
    "MatchDisputeCreate(bytes32,uint256)": FunctionFragment;
    "checkCompetition(bytes32)": FunctionFragment;
    "getCompetition(bytes32)": FunctionFragment;
    "getCompetitionAtIndex(uint256)": FunctionFragment;
    "getCompetitionCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CancelCompetition"
      | "CreateCompetition"
      | "MatchDisputeCreate"
      | "checkCompetition"
      | "getCompetition"
      | "getCompetitionAtIndex"
      | "getCompetitionCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CancelCompetition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "CreateCompetition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "MatchDisputeCreate",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCompetition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompetition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompetitionAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompetitionCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CancelCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CreateCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MatchDisputeCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompetitionAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompetitionCount",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OurkadeCompetition extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OurkadeCompetitionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CancelCompetition(
      _competitionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    CreateCompetition(
      _competitionParamBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    MatchDisputeCreate(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkCompetition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCompetition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[CompetitionStructOutput]>;

    getCompetitionAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { key: string }>;

    getCompetitionCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  CancelCompetition(
    _competitionId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  CreateCompetition(
    _competitionParamBytes: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  MatchDisputeCreate(
    _competitionId: PromiseOrValue<BytesLike>,
    _matchIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkCompetition(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCompetition(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<CompetitionStructOutput>;

  getCompetitionAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCompetitionCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    CancelCompetition(
      _competitionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    CreateCompetition(
      _competitionParamBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    MatchDisputeCreate(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkCompetition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCompetition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<CompetitionStructOutput>;

    getCompetitionAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCompetitionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    CancelCompetition(
      _competitionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    CreateCompetition(
      _competitionParamBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    MatchDisputeCreate(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkCompetition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompetition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompetitionAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompetitionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CancelCompetition(
      _competitionId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    CreateCompetition(
      _competitionParamBytes: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    MatchDisputeCreate(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkCompetition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompetition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompetitionAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompetitionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
