/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type PlayerProfileStruct = {
  PlayerProfileId: PromiseOrValue<BytesLike>;
  Tickets: PromiseOrValue<BigNumberish>;
  Rewards: PromiseOrValue<BigNumberish>;
  Loyalty: PromiseOrValue<BigNumberish>;
  Reputation: PromiseOrValue<BigNumberish>;
  CompetitionNonce: PromiseOrValue<BigNumberish>;
  LastGameTimestamp: PromiseOrValue<BigNumberish>;
  GuiltyCount: PromiseOrValue<BigNumberish>;
  LastGuiltyTimestamp: PromiseOrValue<BigNumberish>;
  NodeCount: PromiseOrValue<BigNumberish>;
  Status: PromiseOrValue<BigNumberish>;
};

export type PlayerProfileStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  PlayerProfileId: string;
  Tickets: BigNumber;
  Rewards: BigNumber;
  Loyalty: BigNumber;
  Reputation: number;
  CompetitionNonce: BigNumber;
  LastGameTimestamp: BigNumber;
  GuiltyCount: BigNumber;
  LastGuiltyTimestamp: BigNumber;
  NodeCount: BigNumber;
  Status: number;
};

export interface OurkadePlayerInterface extends utils.Interface {
  functions: {
    "CreateProfile()": FunctionFragment;
    "GetPlayerProfile(bytes32)": FunctionFragment;
    "GetPlayerProfile(address)": FunctionFragment;
    "GetPlayerProfileAtIndex(uint256)": FunctionFragment;
    "GetPlayerProfileCount()": FunctionFragment;
    "HasAnotherMatch(bytes)": FunctionFragment;
    "MatchDisputeCalculateStatus(bytes32,uint256)": FunctionFragment;
    "MatchDisputeResolve(bytes32,uint256,uint8[])": FunctionFragment;
    "RegisterForMatch(bytes32,bytes32)": FunctionFragment;
    "ScoreCompetition(bytes32,uint96)": FunctionFragment;
    "SubmitMatch(bytes32,bytes,uint256)": FunctionFragment;
    "checkPlayerProfile(bytes32)": FunctionFragment;
    "checkPlayerProfile(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CreateProfile"
      | "GetPlayerProfile(bytes32)"
      | "GetPlayerProfile(address)"
      | "GetPlayerProfileAtIndex"
      | "GetPlayerProfileCount"
      | "HasAnotherMatch"
      | "MatchDisputeCalculateStatus"
      | "MatchDisputeResolve"
      | "RegisterForMatch"
      | "ScoreCompetition"
      | "SubmitMatch"
      | "checkPlayerProfile(bytes32)"
      | "checkPlayerProfile(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CreateProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetPlayerProfile(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetPlayerProfile(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetPlayerProfileAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetPlayerProfileCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HasAnotherMatch",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "MatchDisputeCalculateStatus",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "MatchDisputeResolve",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "RegisterForMatch",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ScoreCompetition",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SubmitMatch",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPlayerProfile(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPlayerProfile(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CreateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetPlayerProfile(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetPlayerProfile(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetPlayerProfileAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetPlayerProfileCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HasAnotherMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MatchDisputeCalculateStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MatchDisputeResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RegisterForMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ScoreCompetition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SubmitMatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPlayerProfile(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPlayerProfile(address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OurkadePlayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OurkadePlayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CreateProfile(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "GetPlayerProfile(bytes32)"(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "GetPlayerProfile(address)"(
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    GetPlayerProfileAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { key: string }>;

    GetPlayerProfileCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    HasAnotherMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    MatchDisputeCalculateStatus(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    MatchDisputeResolve(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      _revealedVotes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    RegisterForMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      _ticketHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ScoreCompetition(
      _competitionId: PromiseOrValue<BytesLike>,
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SubmitMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      _dataPin: PromiseOrValue<BytesLike>,
      _score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "checkPlayerProfile(bytes32)"(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkPlayerProfile(address)"(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  CreateProfile(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "GetPlayerProfile(bytes32)"(
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "GetPlayerProfile(address)"(
    key: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  GetPlayerProfileAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  GetPlayerProfileCount(overrides?: CallOverrides): Promise<BigNumber>;

  HasAnotherMatch(
    _competitionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  MatchDisputeCalculateStatus(
    _competitionId: PromiseOrValue<BytesLike>,
    _matchIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  MatchDisputeResolve(
    _competitionId: PromiseOrValue<BytesLike>,
    _matchIndex: PromiseOrValue<BigNumberish>,
    _revealedVotes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  RegisterForMatch(
    _competitionId: PromiseOrValue<BytesLike>,
    _ticketHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ScoreCompetition(
    _competitionId: PromiseOrValue<BytesLike>,
    _nodeNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SubmitMatch(
    _competitionId: PromiseOrValue<BytesLike>,
    _dataPin: PromiseOrValue<BytesLike>,
    _score: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "checkPlayerProfile(bytes32)"(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkPlayerProfile(address)"(
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    CreateProfile(overrides?: CallOverrides): Promise<void>;

    "GetPlayerProfile(bytes32)"(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PlayerProfileStructOutput>;

    "GetPlayerProfile(address)"(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PlayerProfileStructOutput>;

    GetPlayerProfileAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    GetPlayerProfileCount(overrides?: CallOverrides): Promise<BigNumber>;

    HasAnotherMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    MatchDisputeCalculateStatus(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    MatchDisputeResolve(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      _revealedVotes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    RegisterForMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      _ticketHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    ScoreCompetition(
      _competitionId: PromiseOrValue<BytesLike>,
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    SubmitMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      _dataPin: PromiseOrValue<BytesLike>,
      _score: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkPlayerProfile(bytes32)"(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkPlayerProfile(address)"(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    CreateProfile(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "GetPlayerProfile(bytes32)"(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "GetPlayerProfile(address)"(
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    GetPlayerProfileAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetPlayerProfileCount(overrides?: CallOverrides): Promise<BigNumber>;

    HasAnotherMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MatchDisputeCalculateStatus(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MatchDisputeResolve(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      _revealedVotes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    RegisterForMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      _ticketHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ScoreCompetition(
      _competitionId: PromiseOrValue<BytesLike>,
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SubmitMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      _dataPin: PromiseOrValue<BytesLike>,
      _score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "checkPlayerProfile(bytes32)"(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkPlayerProfile(address)"(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CreateProfile(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "GetPlayerProfile(bytes32)"(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "GetPlayerProfile(address)"(
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    GetPlayerProfileAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetPlayerProfileCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HasAnotherMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MatchDisputeCalculateStatus(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MatchDisputeResolve(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      _revealedVotes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    RegisterForMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      _ticketHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ScoreCompetition(
      _competitionId: PromiseOrValue<BytesLike>,
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SubmitMatch(
      _competitionId: PromiseOrValue<BytesLike>,
      _dataPin: PromiseOrValue<BytesLike>,
      _score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "checkPlayerProfile(bytes32)"(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkPlayerProfile(address)"(
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
