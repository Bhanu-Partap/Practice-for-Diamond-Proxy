/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type MatchStruct = {
  DataPin: PromiseOrValue<BytesLike>;
  Round: PromiseOrValue<BigNumberish>;
  Player: PromiseOrValue<string>;
  Score: PromiseOrValue<BigNumberish>;
  Status: PromiseOrValue<BigNumberish>;
  StartTime: PromiseOrValue<BigNumberish>;
  EndTime: PromiseOrValue<BigNumberish>;
};

export type MatchStructOutput = [
  string,
  number,
  string,
  BigNumber,
  number,
  BigNumber,
  BigNumber
] & {
  DataPin: string;
  Round: number;
  Player: string;
  Score: BigNumber;
  Status: number;
  StartTime: BigNumber;
  EndTime: BigNumber;
};

export type CompetitionStruct = {
  CompetitionId: PromiseOrValue<BytesLike>;
  GameDefinition: PromiseOrValue<BytesLike>;
  EligibleByTicket: PromiseOrValue<boolean>;
  EligibleLoyalty: PromiseOrValue<BigNumberish>;
  EligibleReputation: PromiseOrValue<BigNumberish>;
  EligibleRankMinimum: PromiseOrValue<BigNumberish>;
  EligibleRankMaximum: PromiseOrValue<BigNumberish>;
  EligibleEloMinimum: PromiseOrValue<BigNumberish>;
  EligibleEloMaximum: PromiseOrValue<BigNumberish>;
  CurrencyType: PromiseOrValue<BigNumberish>;
  PrizeType: PromiseOrValue<BigNumberish>;
  PrizePool: PromiseOrValue<BigNumberish>;
  NodeReward: PromiseOrValue<BigNumberish>;
  EntryFee: PromiseOrValue<BigNumberish>;
  MinimumPlayers: PromiseOrValue<BigNumberish>;
  MaximumPlayers: PromiseOrValue<BigNumberish>;
  Players: PromiseOrValue<string>[];
  Matches: MatchStruct[];
  MatchScoreData: PromiseOrValue<BigNumberish>[];
  EndTime: PromiseOrValue<BigNumberish>;
  MatchesPerRound: PromiseOrValue<BigNumberish>;
  MatchDuration: PromiseOrValue<BigNumberish>;
  HasDisputes: PromiseOrValue<boolean>;
  DataPin: PromiseOrValue<BytesLike>;
  Judges: PromiseOrValue<BytesLike>[];
  Status: PromiseOrValue<BigNumberish>;
};

export type CompetitionStructOutput = [
  string,
  string,
  boolean,
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string[],
  MatchStructOutput[],
  BigNumber[],
  BigNumber,
  number,
  BigNumber,
  boolean,
  string,
  string[],
  number
] & {
  CompetitionId: string;
  GameDefinition: string;
  EligibleByTicket: boolean;
  EligibleLoyalty: BigNumber;
  EligibleReputation: number;
  EligibleRankMinimum: number;
  EligibleRankMaximum: number;
  EligibleEloMinimum: number;
  EligibleEloMaximum: number;
  CurrencyType: number;
  PrizeType: number;
  PrizePool: BigNumber;
  NodeReward: BigNumber;
  EntryFee: BigNumber;
  MinimumPlayers: BigNumber;
  MaximumPlayers: BigNumber;
  Players: string[];
  Matches: MatchStructOutput[];
  MatchScoreData: BigNumber[];
  EndTime: BigNumber;
  MatchesPerRound: number;
  MatchDuration: BigNumber;
  HasDisputes: boolean;
  DataPin: string;
  Judges: string[];
  Status: number;
};

export type GameDefinitionStruct = {
  GameDefinitionId: PromiseOrValue<BytesLike>;
  Name: PromiseOrValue<string>;
  IsMultiplayer: PromiseOrValue<boolean>;
  Status: PromiseOrValue<BigNumberish>;
};

export type GameDefinitionStructOutput = [string, string, boolean, number] & {
  GameDefinitionId: string;
  Name: string;
  IsMultiplayer: boolean;
  Status: number;
};

export type NodeInfoStruct = {
  PlayerProfileId: PromiseOrValue<string>;
  NodeId: PromiseOrValue<BigNumberish>;
  LoyaltyLocked: PromiseOrValue<BigNumberish>[];
  Status: PromiseOrValue<BigNumberish>;
};

export type NodeInfoStructOutput = [string, BigNumber, BigNumber[], number] & {
  PlayerProfileId: string;
  NodeId: BigNumber;
  LoyaltyLocked: BigNumber[];
  Status: number;
};

export type PlayerProfileStruct = {
  PlayerProfileId: PromiseOrValue<BytesLike>;
  Tickets: PromiseOrValue<BigNumberish>;
  Rewards: PromiseOrValue<BigNumberish>;
  Loyalty: PromiseOrValue<BigNumberish>;
  Reputation: PromiseOrValue<BigNumberish>;
  CompetitionNonce: PromiseOrValue<BigNumberish>;
  LastGameTimestamp: PromiseOrValue<BigNumberish>;
  GuiltyCount: PromiseOrValue<BigNumberish>;
  LastGuiltyTimestamp: PromiseOrValue<BigNumberish>;
  NodeCount: PromiseOrValue<BigNumberish>;
  Status: PromiseOrValue<BigNumberish>;
};

export type PlayerProfileStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  PlayerProfileId: string;
  Tickets: BigNumber;
  Rewards: BigNumber;
  Loyalty: BigNumber;
  Reputation: number;
  CompetitionNonce: BigNumber;
  LastGameTimestamp: BigNumber;
  GuiltyCount: BigNumber;
  LastGuiltyTimestamp: BigNumber;
  NodeCount: BigNumber;
  Status: number;
};

export interface OurkadeAdminInterface extends utils.Interface {
  functions: {
    "AddOurkadeAdmin(address)": FunctionFragment;
    "AddOurkadeOperator(address)": FunctionFragment;
    "AdminAbsolveProfile(address)": FunctionFragment;
    "AdminCreateProfile(address)": FunctionFragment;
    "AdminExcuseProfile(address)": FunctionFragment;
    "CreateGameDefinition(bytes32,string,bool)": FunctionFragment;
    "DepositTickets(address,uint256)": FunctionFragment;
    "DisableGameDefinition(bytes32)": FunctionFragment;
    "IsAccessAdmin(address)": FunctionFragment;
    "IsOurkadeAdmin(address)": FunctionFragment;
    "IsOurkadeOperator(address)": FunctionFragment;
    "MatchDisputeSubmitVote(bytes32,uint256,bytes32,bytes[])": FunctionFragment;
    "NodeAssign(address,uint96)": FunctionFragment;
    "NodeQueueCompact()": FunctionFragment;
    "NodeQueueReset()": FunctionFragment;
    "NodeQueueTierSet(uint256,uint64,uint256)": FunctionFragment;
    "NodeRemove(address,uint96)": FunctionFragment;
    "NodeStakeQueueTier(uint96)": FunctionFragment;
    "NodeStatusOffline(uint96)": FunctionFragment;
    "NodeStatusOnline(uint96)": FunctionFragment;
    "NodeUnstakeQueueTier(uint96)": FunctionFragment;
    "RemoveOurkadeAdmin(address)": FunctionFragment;
    "RemoveOurkadeOperator(address)": FunctionFragment;
    "SetCompetitionSlash(uint8)": FunctionFragment;
    "SetDisputeDuration(uint256)": FunctionFragment;
    "SetDisputeVotesRequired(uint256)": FunctionFragment;
    "SetLoyaltyLookup(uint64[])": FunctionFragment;
    "SetMatchTimeLimit(uint256)": FunctionFragment;
    "SetPlayerGameRanks(bytes32[],address[],uint8[])": FunctionFragment;
    "SetRepAdjustRightAccuse(uint32)": FunctionFragment;
    "SetRepAdjustWrongAccuse(uint32)": FunctionFragment;
    "checkrole(bytes32)": FunctionFragment;
    "init(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AddOurkadeAdmin"
      | "AddOurkadeOperator"
      | "AdminAbsolveProfile"
      | "AdminCreateProfile"
      | "AdminExcuseProfile"
      | "CreateGameDefinition"
      | "DepositTickets"
      | "DisableGameDefinition"
      | "IsAccessAdmin"
      | "IsOurkadeAdmin"
      | "IsOurkadeOperator"
      | "MatchDisputeSubmitVote"
      | "NodeAssign"
      | "NodeQueueCompact"
      | "NodeQueueReset"
      | "NodeQueueTierSet"
      | "NodeRemove"
      | "NodeStakeQueueTier"
      | "NodeStatusOffline"
      | "NodeStatusOnline"
      | "NodeUnstakeQueueTier"
      | "RemoveOurkadeAdmin"
      | "RemoveOurkadeOperator"
      | "SetCompetitionSlash"
      | "SetDisputeDuration"
      | "SetDisputeVotesRequired"
      | "SetLoyaltyLookup"
      | "SetMatchTimeLimit"
      | "SetPlayerGameRanks"
      | "SetRepAdjustRightAccuse"
      | "SetRepAdjustWrongAccuse"
      | "checkrole"
      | "init"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AddOurkadeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "AddOurkadeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "AdminAbsolveProfile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "AdminCreateProfile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "AdminExcuseProfile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "CreateGameDefinition",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "DepositTickets",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "DisableGameDefinition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "IsAccessAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "IsOurkadeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "IsOurkadeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "MatchDisputeSubmitVote",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "NodeAssign",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "NodeQueueCompact",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NodeQueueReset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NodeQueueTierSet",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "NodeRemove",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "NodeStakeQueueTier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "NodeStatusOffline",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "NodeStatusOnline",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "NodeUnstakeQueueTier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "RemoveOurkadeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "RemoveOurkadeOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetCompetitionSlash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetDisputeDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetDisputeVotesRequired",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetLoyaltyLookup",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "SetMatchTimeLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetPlayerGameRanks",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "SetRepAdjustRightAccuse",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetRepAdjustWrongAccuse",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkrole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AddOurkadeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AddOurkadeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AdminAbsolveProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AdminCreateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AdminExcuseProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CreateGameDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DepositTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DisableGameDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IsAccessAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IsOurkadeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IsOurkadeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MatchDisputeSubmitVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NodeAssign", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NodeQueueCompact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NodeQueueReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NodeQueueTierSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NodeRemove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NodeStakeQueueTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NodeStatusOffline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NodeStatusOnline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NodeUnstakeQueueTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RemoveOurkadeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RemoveOurkadeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetCompetitionSlash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetDisputeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetDisputeVotesRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetLoyaltyLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetMatchTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetPlayerGameRanks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetRepAdjustRightAccuse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetRepAdjustWrongAccuse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkrole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "LogActionAssigned(address[],uint8,bytes)": EventFragment;
    "LogActionCompleted(address,uint8,bytes)": EventFragment;
    "LogCompetition(address,bytes32,uint8,tuple)": EventFragment;
    "LogGame(address,bytes32,uint8,tuple)": EventFragment;
    "LogNodeInfo(address,bytes32,uint8,tuple)": EventFragment;
    "LogNodeQueueJoin(address,bytes32)": EventFragment;
    "LogNodeQueueLeave(address,bytes32)": EventFragment;
    "LogNodeQueueRebuild(address)": EventFragment;
    "LogPlayerProfile(address,address,uint8,tuple)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogActionAssigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogActionCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCompetition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNodeInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNodeQueueJoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNodeQueueLeave"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogNodeQueueRebuild"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPlayerProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LogActionAssignedEventObject {
  assigned: string[];
  action: number;
  key: string;
}
export type LogActionAssignedEvent = TypedEvent<
  [string[], number, string],
  LogActionAssignedEventObject
>;

export type LogActionAssignedEventFilter =
  TypedEventFilter<LogActionAssignedEvent>;

export interface LogActionCompletedEventObject {
  assigned: string;
  action: number;
  key: string;
}
export type LogActionCompletedEvent = TypedEvent<
  [string, number, string],
  LogActionCompletedEventObject
>;

export type LogActionCompletedEventFilter =
  TypedEventFilter<LogActionCompletedEvent>;

export interface LogCompetitionEventObject {
  sender: string;
  key: string;
  change: number;
  competition: CompetitionStructOutput;
}
export type LogCompetitionEvent = TypedEvent<
  [string, string, number, CompetitionStructOutput],
  LogCompetitionEventObject
>;

export type LogCompetitionEventFilter = TypedEventFilter<LogCompetitionEvent>;

export interface LogGameEventObject {
  sender: string;
  key: string;
  change: number;
  game: GameDefinitionStructOutput;
}
export type LogGameEvent = TypedEvent<
  [string, string, number, GameDefinitionStructOutput],
  LogGameEventObject
>;

export type LogGameEventFilter = TypedEventFilter<LogGameEvent>;

export interface LogNodeInfoEventObject {
  sender: string;
  key: string;
  change: number;
  info: NodeInfoStructOutput;
}
export type LogNodeInfoEvent = TypedEvent<
  [string, string, number, NodeInfoStructOutput],
  LogNodeInfoEventObject
>;

export type LogNodeInfoEventFilter = TypedEventFilter<LogNodeInfoEvent>;

export interface LogNodeQueueJoinEventObject {
  sender: string;
  key: string;
}
export type LogNodeQueueJoinEvent = TypedEvent<
  [string, string],
  LogNodeQueueJoinEventObject
>;

export type LogNodeQueueJoinEventFilter =
  TypedEventFilter<LogNodeQueueJoinEvent>;

export interface LogNodeQueueLeaveEventObject {
  sender: string;
  key: string;
}
export type LogNodeQueueLeaveEvent = TypedEvent<
  [string, string],
  LogNodeQueueLeaveEventObject
>;

export type LogNodeQueueLeaveEventFilter =
  TypedEventFilter<LogNodeQueueLeaveEvent>;

export interface LogNodeQueueRebuildEventObject {
  sender: string;
}
export type LogNodeQueueRebuildEvent = TypedEvent<
  [string],
  LogNodeQueueRebuildEventObject
>;

export type LogNodeQueueRebuildEventFilter =
  TypedEventFilter<LogNodeQueueRebuildEvent>;

export interface LogPlayerProfileEventObject {
  sender: string;
  key: string;
  change: number;
  profile: PlayerProfileStructOutput;
}
export type LogPlayerProfileEvent = TypedEvent<
  [string, string, number, PlayerProfileStructOutput],
  LogPlayerProfileEventObject
>;

export type LogPlayerProfileEventFilter =
  TypedEventFilter<LogPlayerProfileEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface OurkadeAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OurkadeAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AddOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    AddOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    AdminAbsolveProfile(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    AdminCreateProfile(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    AdminExcuseProfile(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    CreateGameDefinition(
      _id: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _isMultiplayer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    DepositTickets(
      _target: PromiseOrValue<string>,
      _addTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    DisableGameDefinition(
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    IsAccessAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    IsOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    IsOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    MatchDisputeSubmitVote(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _reveals: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeAssign(
      _player: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeQueueCompact(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeQueueReset(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeQueueTierSet(
      _tier: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _turns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeRemove(
      _player: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeStakeQueueTier(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeStatusOffline(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeStatusOnline(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    NodeUnstakeQueueTier(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    RemoveOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    RemoveOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetCompetitionSlash(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetDisputeDuration(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetDisputeVotesRequired(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetLoyaltyLookup(
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetMatchTimeLimit(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetPlayerGameRanks(
      _gameDefinition: PromiseOrValue<BytesLike>[],
      _player: PromiseOrValue<string>[],
      _rank: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetRepAdjustRightAccuse(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetRepAdjustWrongAccuse(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkrole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    init(
      contractadmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AddOurkadeAdmin(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  AddOurkadeOperator(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  AdminAbsolveProfile(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  AdminCreateProfile(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  AdminExcuseProfile(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  CreateGameDefinition(
    _id: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<string>,
    _isMultiplayer: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  DepositTickets(
    _target: PromiseOrValue<string>,
    _addTickets: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  DisableGameDefinition(
    _id: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  IsAccessAdmin(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  IsOurkadeAdmin(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  IsOurkadeOperator(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  MatchDisputeSubmitVote(
    _competitionId: PromiseOrValue<BytesLike>,
    _matchIndex: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    _reveals: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeAssign(
    _player: PromiseOrValue<string>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeQueueCompact(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeQueueReset(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeQueueTierSet(
    _tier: PromiseOrValue<BigNumberish>,
    _limit: PromiseOrValue<BigNumberish>,
    _turns: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeRemove(
    _player: PromiseOrValue<string>,
    _count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeStakeQueueTier(
    _nodeNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeStatusOffline(
    _nodeNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeStatusOnline(
    _nodeNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  NodeUnstakeQueueTier(
    _nodeNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  RemoveOurkadeAdmin(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  RemoveOurkadeOperator(
    _address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetCompetitionSlash(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetDisputeDuration(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetDisputeVotesRequired(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetLoyaltyLookup(
    _value: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetMatchTimeLimit(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetPlayerGameRanks(
    _gameDefinition: PromiseOrValue<BytesLike>[],
    _player: PromiseOrValue<string>[],
    _rank: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetRepAdjustRightAccuse(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetRepAdjustWrongAccuse(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkrole(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  init(
    contractadmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AddOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    AddOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    AdminAbsolveProfile(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    AdminCreateProfile(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    AdminExcuseProfile(
      _target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    CreateGameDefinition(
      _id: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _isMultiplayer: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    DepositTickets(
      _target: PromiseOrValue<string>,
      _addTickets: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    DisableGameDefinition(
      _id: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    IsAccessAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    IsOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    IsOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    MatchDisputeSubmitVote(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _reveals: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    NodeAssign(
      _player: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    NodeQueueCompact(overrides?: CallOverrides): Promise<void>;

    NodeQueueReset(overrides?: CallOverrides): Promise<void>;

    NodeQueueTierSet(
      _tier: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _turns: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    NodeRemove(
      _player: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    NodeStakeQueueTier(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    NodeStatusOffline(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    NodeStatusOnline(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    NodeUnstakeQueueTier(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    RemoveOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    RemoveOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    SetCompetitionSlash(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    SetDisputeDuration(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    SetDisputeVotesRequired(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    SetLoyaltyLookup(
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    SetMatchTimeLimit(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    SetPlayerGameRanks(
      _gameDefinition: PromiseOrValue<BytesLike>[],
      _player: PromiseOrValue<string>[],
      _rank: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    SetRepAdjustRightAccuse(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    SetRepAdjustWrongAccuse(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkrole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      contractadmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LogActionAssigned(address[],uint8,bytes)"(
      assigned?: PromiseOrValue<string>[] | null,
      action?: null,
      key?: PromiseOrValue<BytesLike> | null
    ): LogActionAssignedEventFilter;
    LogActionAssigned(
      assigned?: PromiseOrValue<string>[] | null,
      action?: null,
      key?: PromiseOrValue<BytesLike> | null
    ): LogActionAssignedEventFilter;

    "LogActionCompleted(address,uint8,bytes)"(
      assigned?: PromiseOrValue<string> | null,
      action?: null,
      key?: PromiseOrValue<BytesLike> | null
    ): LogActionCompletedEventFilter;
    LogActionCompleted(
      assigned?: PromiseOrValue<string> | null,
      action?: null,
      key?: PromiseOrValue<BytesLike> | null
    ): LogActionCompletedEventFilter;

    "LogCompetition(address,bytes32,uint8,tuple)"(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null,
      change?: PromiseOrValue<BigNumberish> | null,
      competition?: null
    ): LogCompetitionEventFilter;
    LogCompetition(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null,
      change?: PromiseOrValue<BigNumberish> | null,
      competition?: null
    ): LogCompetitionEventFilter;

    "LogGame(address,bytes32,uint8,tuple)"(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null,
      change?: PromiseOrValue<BigNumberish> | null,
      game?: null
    ): LogGameEventFilter;
    LogGame(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null,
      change?: PromiseOrValue<BigNumberish> | null,
      game?: null
    ): LogGameEventFilter;

    "LogNodeInfo(address,bytes32,uint8,tuple)"(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null,
      change?: PromiseOrValue<BigNumberish> | null,
      info?: null
    ): LogNodeInfoEventFilter;
    LogNodeInfo(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null,
      change?: PromiseOrValue<BigNumberish> | null,
      info?: null
    ): LogNodeInfoEventFilter;

    "LogNodeQueueJoin(address,bytes32)"(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null
    ): LogNodeQueueJoinEventFilter;
    LogNodeQueueJoin(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null
    ): LogNodeQueueJoinEventFilter;

    "LogNodeQueueLeave(address,bytes32)"(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null
    ): LogNodeQueueLeaveEventFilter;
    LogNodeQueueLeave(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<BytesLike> | null
    ): LogNodeQueueLeaveEventFilter;

    "LogNodeQueueRebuild(address)"(
      sender?: PromiseOrValue<string> | null
    ): LogNodeQueueRebuildEventFilter;
    LogNodeQueueRebuild(
      sender?: PromiseOrValue<string> | null
    ): LogNodeQueueRebuildEventFilter;

    "LogPlayerProfile(address,address,uint8,tuple)"(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<string> | null,
      change?: PromiseOrValue<BigNumberish> | null,
      profile?: null
    ): LogPlayerProfileEventFilter;
    LogPlayerProfile(
      sender?: PromiseOrValue<string> | null,
      key?: PromiseOrValue<string> | null,
      change?: PromiseOrValue<BigNumberish> | null,
      profile?: null
    ): LogPlayerProfileEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
  };

  estimateGas: {
    AddOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    AddOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    AdminAbsolveProfile(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    AdminCreateProfile(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    AdminExcuseProfile(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    CreateGameDefinition(
      _id: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _isMultiplayer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    DepositTickets(
      _target: PromiseOrValue<string>,
      _addTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    DisableGameDefinition(
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    IsAccessAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IsOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IsOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MatchDisputeSubmitVote(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _reveals: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeAssign(
      _player: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeQueueCompact(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeQueueReset(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeQueueTierSet(
      _tier: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _turns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeRemove(
      _player: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeStakeQueueTier(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeStatusOffline(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeStatusOnline(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    NodeUnstakeQueueTier(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    RemoveOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    RemoveOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetCompetitionSlash(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetDisputeDuration(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetDisputeVotesRequired(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetLoyaltyLookup(
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetMatchTimeLimit(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetPlayerGameRanks(
      _gameDefinition: PromiseOrValue<BytesLike>[],
      _player: PromiseOrValue<string>[],
      _rank: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetRepAdjustRightAccuse(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetRepAdjustWrongAccuse(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkrole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      contractadmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AddOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    AddOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    AdminAbsolveProfile(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    AdminCreateProfile(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    AdminExcuseProfile(
      _target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    CreateGameDefinition(
      _id: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _isMultiplayer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    DepositTickets(
      _target: PromiseOrValue<string>,
      _addTickets: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    DisableGameDefinition(
      _id: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    IsAccessAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IsOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IsOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MatchDisputeSubmitVote(
      _competitionId: PromiseOrValue<BytesLike>,
      _matchIndex: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      _reveals: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeAssign(
      _player: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeQueueCompact(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeQueueReset(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeQueueTierSet(
      _tier: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _turns: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeRemove(
      _player: PromiseOrValue<string>,
      _count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeStakeQueueTier(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeStatusOffline(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeStatusOnline(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    NodeUnstakeQueueTier(
      _nodeNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    RemoveOurkadeAdmin(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    RemoveOurkadeOperator(
      _address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetCompetitionSlash(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetDisputeDuration(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetDisputeVotesRequired(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetLoyaltyLookup(
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetMatchTimeLimit(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetPlayerGameRanks(
      _gameDefinition: PromiseOrValue<BytesLike>[],
      _player: PromiseOrValue<string>[],
      _rank: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetRepAdjustRightAccuse(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetRepAdjustWrongAccuse(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkrole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      contractadmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
