/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type GameDefinitionStruct = {
  GameDefinitionId: PromiseOrValue<BytesLike>;
  Name: PromiseOrValue<string>;
  IsMultiplayer: PromiseOrValue<boolean>;
  Status: PromiseOrValue<BigNumberish>;
};

export type GameDefinitionStructOutput = [string, string, boolean, number] & {
  GameDefinitionId: string;
  Name: string;
  IsMultiplayer: boolean;
  Status: number;
};

export interface OurkadeGameInterface extends utils.Interface {
  functions: {
    "checkGameDefinition(bytes32)": FunctionFragment;
    "getGameDefinition(bytes32)": FunctionFragment;
    "getGameDefinitionAtIndex(uint256)": FunctionFragment;
    "getGameDefinitionCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkGameDefinition"
      | "getGameDefinition"
      | "getGameDefinitionAtIndex"
      | "getGameDefinitionCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkGameDefinition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameDefinition",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameDefinitionAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameDefinitionCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkGameDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameDefinition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameDefinitionAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameDefinitionCount",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OurkadeGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OurkadeGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkGameDefinition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getGameDefinition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[GameDefinitionStructOutput]>;

    getGameDefinitionAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { key: string }>;

    getGameDefinitionCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  checkGameDefinition(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getGameDefinition(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GameDefinitionStructOutput>;

  getGameDefinitionAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getGameDefinitionCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    checkGameDefinition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getGameDefinition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GameDefinitionStructOutput>;

    getGameDefinitionAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getGameDefinitionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    checkGameDefinition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameDefinition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameDefinitionAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameDefinitionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkGameDefinition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameDefinition(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameDefinitionAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameDefinitionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
